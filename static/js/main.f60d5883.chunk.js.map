{"version":3,"sources":["compornents/Container.js","compornents/Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","className","method","type","name","autoComplete","TodoList","title","items","map","item","key","id","TodoItem","todo","isDone","Container","itemList","filter","elem","Header","App","TODO_LIST","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOA+BMA,G,UAAU,SAACC,GAAD,OACZ,0BAAMC,UAAY,OAAOC,OAAS,QAC9B,2BAAOC,KAAO,OAAOC,KAAO,OAAOC,aAAe,QAClD,4BAAQF,KAAO,SAASF,UAAY,mBAApC,UAIFK,EAAW,SAACN,GAAD,OACb,6BACI,2BAAOC,UAAY,eAAeD,EAAMO,OACxC,2BAAON,UAAY,aACf,+BAEQD,EAAMQ,MAAMC,KAAI,SAAAC,GAAI,OAChB,kBAAC,EAAD,CAAUC,IAAMD,EAAKE,GAAIF,KAAQA,WAQnDG,EAAU,SAACb,GAAD,OACZ,4BACI,4BAAKA,EAAMU,KAAKI,MAEXd,EAAMU,KAAKK,OAEP,oCACA,4BAAI,4BAAQd,UAAY,qBAApB,SACJ,4BAAI,4BAAQA,UAAY,kBAApB,YAHJ,4BAAI,4BAAQA,UAAY,mBAApB,WASNe,EAjEG,SAAChB,GACf,IAAMiB,EAAW,CACb,CACIV,MAAQ,OACRC,MAAQR,EAAMQ,MAAMU,QAAO,SAAAJ,GAAI,OAAKA,EAAKC,WAE7C,CACIR,MAAQ,OACRC,MAAQR,EAAMQ,MAAMU,QAAO,SAAAJ,GAAI,OAAIA,EAAKC,YAIhD,OACI,yBAAKd,UAAY,qBACb,yBAAKA,UAAY,aACb,kBAAC,EAAD,MAEIgB,EAASR,KAAI,SAAAU,GAAI,OACb,kBAAC,EAAD,CACIR,IAAMQ,EAAKZ,MACXA,MAASY,EAAKZ,MACdC,MAASW,EAAKX,cCf3BY,EANA,kBACX,yBAAKnB,UAAY,UACb,+CCQOoB,EAPH,kBACV,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWb,MAASc,MAMlBA,EAAY,CAChB,CACEV,GAAK,EACLE,KAAO,YACPC,QAAS,GAEX,CACEH,GAAK,EACLE,KAAO,YACPC,QAAS,GAEX,CACEH,GAAK,EACLE,KAAO,YACPC,QAAS,GAEX,CACEH,GAAK,EACLE,KAAO,YACPC,QAAS,GAEX,CACEH,GAAK,EACLE,KAAO,YACPC,QAAS,IC1BOQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f60d5883.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Container = (props) => {\r\n    const itemList = [\r\n        {\r\n            title : \"todo\",\r\n            items : props.items.filter(todo => !todo.isDone)\r\n        },\r\n        {\r\n            title : \"done\",\r\n            items : props.items.filter(todo => todo.isDone)\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div className = \"container-wrapper\">\r\n            <div className = \"container\">\r\n                <TodoForm />\r\n                {\r\n                    itemList.map(elem =>(\r\n                        <TodoList\r\n                            key ={elem.title}\r\n                            title = {elem.title}\r\n                            items = {elem.items} />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst TodoForm =(props) =>(\r\n    <form className = \"form\" method = \"POST\">\r\n        <input type = \"text\" name = \"todo\" autoComplete = \"off\"/>\r\n        <button type = \"submit\" className = \"btn btn-primary\">ADD</button>\r\n    </form>\r\n);\r\n\r\nconst TodoList = (props) =>(\r\n    <div>\r\n        <label className = \"table-title\">{props.title}</label>\r\n        <table className = \"todo-list\">\r\n            <tbody>\r\n                {\r\n                    props.items.map(item =>(\r\n                        <TodoItem key ={item.id} item = {item} />\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nconst TodoItem =(props) => (\r\n    <tr>\r\n        <td>{props.item.todo}</td>\r\n        {\r\n            !props.item.isDone\r\n                ?<td><button className = \"btn btn-primary\">done</button></td>\r\n                :<>\r\n                 <td><button className = \"btn btn-secondary\">todo</button></td>\r\n                 <td><button className = \"btn btn-danger\">delete</button></td>\r\n                 </>\r\n        }\r\n    </tr>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className = \"header\">\r\n        <span>Simple TODO</span>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\nimport './assets/css/App.css';\nimport Container from './compornents/Container'\nimport Header from './compornents/Header'\n\nconst App = () => (\n  <>\n    <Header />\n    <Container items = {TODO_LIST} />\n  </>\n);\n\nexport default App;\n\nconst TODO_LIST = [\n  {\n    id : 1,\n    todo : 'something',\n    isDone : false,\n  },\n  {\n    id : 2,\n    todo : 'something',\n    isDone : false,\n  },\n  {\n    id : 3,\n    todo : 'something',\n    isDone : false,\n  },\n  {\n    id : 4,\n    todo : 'something',\n    isDone : false,\n  },\n  {\n    id : 5,\n    todo : 'something',\n    isDone : false,\n  },\n]","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}